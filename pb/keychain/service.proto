syntax = "proto3";

package pb.keychain;
option go_package = "github.com/ledgerhq/bitcoin-keychain/pb/keychain";
option java_package = "co.ledger.protobuf.bitcoin.keychain";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

service KeychainService {
  // Create a new keychain by extended public key.
  // The returned UUID depends only of the inputs "extendedPublicKey" and "scheme"
  rpc CreateKeychain(CreateKeychainRequest) returns (KeychainInfo) {
    option (google.api.http) = {
      post: "/v1/bitcoin/CreateKeychain"
      body: "*"
    };
  }

  // Delete a keychain by UUID.
  rpc DeleteKeychain(DeleteKeychainRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/bitcoin/DeleteKeychain"
      body: "*"
    };
  }

  // Reset a keychain by UUID.
  rpc ResetKeychain(ResetKeychainRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/bitcoin/ResetKeychain"
      body: "*"
    };
  }

  // Get keychain metadata by UUID.
  rpc GetKeychainInfo(GetKeychainInfoRequest) returns (KeychainInfo) {
    option (google.api.http) = {
      post: "/v1/bitcoin/GetKeychainInfo"
      body: "*"
    };
  }

  // Mark a batch of addresses as used.
  // NOTE: address being marked as used MUST be observable.
  rpc MarkAddressesAsUsed(MarkAddressesAsUsedRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/bitcoin/MarkAddressesAsUsed"
      body: "*"
    };
  }

  // Get fresh addresses for a registered keychain and the provided Change.
  rpc GetFreshAddresses(GetFreshAddressesRequest) returns (GetFreshAddressesResponse) {
    option (google.api.http) = {
      post: "/v1/bitcoin/GetFreshAddresses"
      body: "*"
    };
  }

  // Get a list of all address that can be observed by the keychain.
  rpc GetAllObservableAddresses(GetAllObservableAddressesRequest) returns (GetAllObservableAddressesResponse) {
    option (google.api.http) = {
      post: "/v1/bitcoin/GetAllObservableAddresses"
      body: "*"
    };
  }

  // Get public keys corresponding of given derivation paths for a registered keychain.
  rpc GetAddressesPublicKeys(GetAddressesPublicKeysRequest) returns (GetAddressesPublicKeysResponse) {
    option (google.api.http) = {
      post: "/v1/bitcoin/GetAddressesPublicKeys"
      body: "*"
    };
  }
}

message GetAddressesPublicKeysRequest {
  // UUID representing the keychain.
  bytes keychain_id = 1;

  // Given derivations to get serialized compressed public keys.
  repeated DerivationPath derivations = 2;
}

message GetAddressesPublicKeysResponse {
  // Serialized compressed public keys
  repeated string public_keys = 1;
}

// Message to wrap a derivation path.
message DerivationPath {
  repeated uint32 derivation = 2;
}

// BitcoinNetwork enumerates the list of all supported Bitcoin networks. It
// also indicates the coin for which the networks are defined, in this case,
// Bitcoin.
//
// This enum type may be used by gRPC clients to differentiate protocol
// behaviour, magic numbers, addresses, keys, etc., for one network from those
// intended for use on another network.
enum BitcoinNetwork {
  BITCOIN_NETWORK_UNSPECIFIED = 0;  // Fallback value if unrecognized / unspecified
  BITCOIN_NETWORK_MAINNET     = 1;  // Main network
  BITCOIN_NETWORK_TESTNET3    = 2;  // Current test network (since Bitcoin Core v0.7)
  BITCOIN_NETWORK_REGTEST     = 3;  // Regression test network
}

enum LitecoinNetwork {
  LITECOIN_NETWORK_UNSPECIFIED = 0;  // Fallback value if unrecognized / unspecified
  LITECOIN_NETWORK_MAINNET     = 1;  // Litecoin main network
}

message ChainParams {
  oneof network {
    BitcoinNetwork bitcoin_network = 1;
    LitecoinNetwork litecoin_network = 2;
  }
}

// Change is an enum type to indicate whether an address belongs to the
// external chain (receive) or the internal chain (change).
enum Change {
  CHANGE_UNSPECIFIED = 0;  // fallback value if unrecognized / unspecified
  CHANGE_EXTERNAL    = 1;  // external chain
  CHANGE_INTERNAL    = 2;  // internal chain
}

// Scheme defines the scheme on which a keychain entry is based.
enum Scheme {
  SCHEME_UNSPECIFIED = 0;  // fallback value if unrecognized / unspecified
  SCHEME_BIP44       = 1;  // indicates that the keychain scheme is legacy.
  SCHEME_BIP49       = 2;  // indicates that the keychain scheme is segwit.
  SCHEME_BIP84       = 3;  // indicates that the keychain scheme is native segwit.
}

message AddressInfo {
  string address = 1;
  repeated uint32 derivation = 2;
  Change change = 3;
}

message CreateKeychainRequest {
  // account to register:
  // could be an extended_public_key 
  // or public_key + chain_code + account_index
  oneof account {
    string extended_public_key = 1;
    FromChainCode from_chain_code = 2;
  }
  Scheme scheme = 3;
  uint32 lookahead_size = 4;
  ChainParams chain_params = 5;
  uint32 account_index = 6;
  // optional backend dependent field
  // In case of "wd" type, we expect "libcore_prefix:workspace"
  string metadata = 7;
}

message FromChainCode {
  // Serialized public key associated with the extended key derived
  // at the account-level derivation path.
  //
  // Both compressed as well as uncompressed public keys are accepted.
  bytes public_key = 1;

  // Serialized chain code associated with the extended key derived at the
  // account-level derivation path.
  //
  // This field is 32 bytes long.
  bytes chain_code = 2;

  // Index at BIP32 level 3.
  uint32 account_index = 3;
}

message DeleteKeychainRequest {
  // UUID representing the keychain
  bytes keychain_id = 1;
}

message ResetKeychainRequest {
  // UUID representing the keychain
  bytes keychain_id = 1;
}

message GetKeychainInfoRequest {
  // UUID representing the keychain
  bytes keychain_id = 1;
}

message KeychainInfo {
  // UUID representing the keychain
  bytes keychain_id = 1;

  // External chain output descriptor of the keychain. It "describes" all
  // external addresses that belong to the keychain.
  // Ref: https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md
  string external_descriptor = 2;

  // Internal chain output descriptor of the keychain. It "describes" all
  // internal addresses that belong to the keychain.
  string internal_descriptor = 3;

  // Extended public key serialized with standard HD version bytes.
  string extended_public_key = 4;

  // Extended public key serialized with SLIP-0132 HD version bytes.
  // Ref: https://github.com/satoshilabs/slips/blob/master/slip-0132.md
  string slip32_extended_public_key = 5;

  // Numerical size of the lookahead zone.
  uint32 lookahead_size = 6;

  Scheme scheme = 7;

  // ChainParams network for which the keychain is defined.
  //
  // Although the network information can be inferred from the extended public
  // key, it is often not enough to differentiate between Testnet3 and Regtest
  // networks, typically the case with the BIP84 scheme.
  //
  // This field is mostly useful for encoding addresses for a specific
  // network.
  ChainParams chain_params = 8;
}

message MarkPathAsUsedRequest {
  // UUID representing the keychain
  bytes keychain_id = 1;

  // Derivation path relative to BIP-32 account path-level.
  //
  // The derivation path is represented by an array of child indexes. Each
  // child index in the path must be between 0 and 2^31-1, i.e., they should
  // not be hardened.
  repeated uint32 derivation = 2;
}

message GetFreshAddressesRequest {
  // UUID representing the keychain
  bytes keychain_id = 1;

  // The chain on which the fresh addresses must be issued on.
  Change change = 2;

  // The number of fresh addresses to derive.
  uint32 batch_size = 3;
}

message GetFreshAddressesResponse {
  repeated AddressInfo addresses = 1;
}

message MarkAddressesAsUsedRequest {
  // UUID representing the keychain
  bytes keychain_id = 1;

  // Addresses to be marked as used
  repeated string addresses = 2;
}

message GetAllObservableAddressesRequest {
  // UUID representing the keychain
  bytes keychain_id = 1;

  // The chain on which the observable addresses must be returned.
  // If unspecified (CHANGE_UNSPECIFIED), return addresses observable on both
  // internal and external chains.
  Change change = 2;

  // Start address index
  uint32 from_index = 3;

  // End address index. If left unspecified, the maximum observable index
  // will be used as the ending address index.
  uint32 to_index = 4;
}

message GetAllObservableAddressesResponse {
  repeated AddressInfo addresses = 1;
}
